import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from site_url import computer

import os
from dotenv import load_dotenv
import markups as nav



load_dotenv()




TOKEN=os.getenv('TOKEN')
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)




@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, text ='–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ñ Mabel Store.üéÜüéá\n–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–µ–≤–µ–ª–∏—á–∫–∏–º –æ–ø–∏—Å–æ–º —Ç–∞ –∑ –µ–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à —á–∞—Å –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–æ–≤–∞—Ä—É.üòÄ', reply_markup=nav.BotMenu)







async def set_default_commands(dp):
     await bot.set_my_commands(
          [
          types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
          ]
     )





@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "–ú–∞–≥–∞–∑–∏–Ω":
        await bot.send_message(message.from_user.id, text = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏", reply_markup=nav.OtherMenu)
    elif message.text == "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞":
        await bot.send_message(message.from_user.id, text = "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞", reply_markup=nav.goods)
    elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await bot.send_message(message.from_user.id, text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=nav.BotMenu)
    elif message.text == "–î–∏–≤–∞–Ω–∏":
        await bot.send_message(message.from_user.id, text = "–î–∏–≤–∞–Ω–∏", reply_markup=nav.sofas)
    elif message.text == "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏":
        await bot.send_message(message.from_user.id, text = "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏", reply_markup=nav.table_school)
    elif message.text == "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏":
        await bot.send_message(message.from_user.id, text = "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏", reply_markup=nav.magazine_tables)
    elif message.text == "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥":
          await bot.send_message(message.from_user.id, text = "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥", reply_markup=nav.book_shelves)

          computer_shop = InlineKeyboardMarkup()
          for teh in computer_shop:
                button = InlineKeyboardButton(text = computer, callback_data=computer)
                computer_shop.add(button)


          

         
@dp.callback_query_handler()
async def computer_info_handler(callback_query: types.CallbackQuery):
     if callback_query.data in computer.keys():
          computer_name = computer[callback_query.data]["name"]
          url = computer[callback_query.data]["site_url"]
          computer_description = computer[callback_query.data]["description"]
          computer_price = computer[callback_query.data]["price"]
          message = f"<b>–ù–∞–∑–≤–∞: </b> {computer_name}\n<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: </b> {url}\n\n<b>–û–ø–∏—Å: </b> {computer_description}\n\n<b>–¶—ñ–Ω–∞:</b> {computer_price}"
          await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')
     else:
          await bot.send_message(callback_query.message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–∞–∂–∞–ª—å –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñüòü")








async def on_startup(dp):
     await set_default_commands(dp)

  
  
if __name__ == '__main__':
     executor.start_polling(dp)
    