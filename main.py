import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from site_url import furniture


import os
from dotenv import load_dotenv
import markups as nav



load_dotenv()




TOKEN=os.getenv('TOKEN')
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)





@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, text ='–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ñ City Store.üéÜüéá\n–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–µ–≤–µ–ª–∏—á–∫–∏–º –æ–ø–∏—Å–æ–º —Ç–∞ –∑ –µ–∫–æ–Ω–æ–º–∏—Ç—å –≤–∞—à —á–∞—Å –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–æ–≤–∞—Ä—É.üòÄ', reply_markup=nav.BotMenu)







async def set_default_commands(dp):
     await bot.set_my_commands(
          [
          types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
          ]
     )





@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "–ú–∞–≥–∞–∑–∏–Ω":
        await bot.send_message(message.from_user.id, text = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏", reply_markup=nav.OtherMenu1)
    elif message.text == "–ú–µ–±–ª—ñ":
         await bot.send_message(message.from_user.id, text = "–ú–µ–±–ª—ñ", reply_markup=nav.OtherMenu)
    elif message.text == "–ù–∞–∑–∞–¥":
         await bot.send_message(message.from_user.id, text = "–ù–∞–∑–∞–¥", reply_markup=nav.OtherMenu1)
    elif message.text == "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞":
        await bot.send_message(message.from_user.id, text = "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞", reply_markup=nav.goods)
    elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await bot.send_message(message.from_user.id, text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=nav.BotMenu)
    elif message.text == "–î–∏–≤–∞–Ω–∏":
        await bot.send_message(message.from_user.id, text = "–î–∏–≤–∞–Ω–∏", reply_markup=nav.sofas)
    elif message.text == "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏":
        await bot.send_message(message.from_user.id, text = "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏", reply_markup=nav.table_school)
    elif message.text == "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏":
        await bot.send_message(message.from_user.id, text = "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏", reply_markup=nav.magazine_tables)
    elif message.text == "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥":
          await bot.send_message(message.from_user.id, text = "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥", reply_markup=nav.book_shelves)
    elif message.text == "–®–∞—Ñ–∏ –∫—É–ø–µ":
          await bot.send_message(message.from_user.id, text = "–®–∞—Ñ–∏ –∫—É–ø–µ", reply_markup=nav.cabinet)
    elif message.text == "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞":
          await bot.send_message(message.from_user.id, text="–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", reply_markup=nav.LaptopMenu)
    elif message.text == "–ù–æ—É—Ç–±—É–∫–∏":
          await bot.send_message(message.from_user.id, text="–ù–æ—É—Ç–±—É–∫–∏", reply_markup=nav.laptop1)
    elif message.text == "–ù–∞–∑–∞–¥":
          await bot.send_message(message.from_user.id, text="–ù–∞–∑–∞–¥", reply_markup=nav.OtherMenu1)
    elif message.text == "–ö–æ–º–ø'—é—Ç–µ—Ä–∏":
          await bot.send_message(message.from_user.id, text="–ö–æ–º–ø'—é—Ç–µ—Ä–∏", reply_markup=nav.computers)
    elif message.text == "–¢–µ–ª–µ–≤—ñ–∑–æ—Ä–∏":
          await bot.send_message(message.from_user.id, text="–¢–µ–ª–µ–≤—ñ–∑–æ—Ä–∏", reply_markup=nav.tv_menu)
    elif message.text == "–û—Ñ—ñ—Å, —à–∫–æ–ª–∞ –∫–Ω–∏–≥–∏":
          await bot.send_message(message.from_user.id, text="–û—Ñ—ñ—Å, —à–∫–æ–ª–∞ –∫–Ω–∏–≥–∏", reply_markup=nav.SchoolMenu)
    elif message.text == "–†—é–∫–∑–∞–∫–∏":
          await bot.send_message(message.from_user.id, text="–†—é–∫–∑–∞–∫–∏", reply_markup=nav.back2)
    elif message.text == "–®–∫—ñ–ª—å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è":
          await bot.send_message(message.from_user.id, text="–®–∫—ñ–ª—å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è", reply_markup=nav.school_ba)
    elif message.text == "–ü–∞–ø–µ—Ä–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è":
          await bot.send_message(message.from_user.id, text="–ü–∞–ø–µ—Ä–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è", reply_markup=nav.paper1)
    elif message.text == "–ó–æ–æ—Ç–æ–≤–∞—Ä–∏":
          await bot.send_message(message.from_user.id, text="–ó–æ–æ—Ç–æ–≤–∞—Ä–∏", reply_markup=nav.PetMenu)
    elif message.text == "–°–æ–±–∞–∫–∞":
          await bot.send_message(message.from_user.id, text="–°–æ–±–∞–∫–∞", reply_markup=nav.goods_dog)
    elif message.text == "–ö—ñ—Ç":
          await bot.send_message(message.from_user.id, text="–ö—ñ—Ç", reply_markup=nav.goods_cat)
    elif message.text == "–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞":
          await bot.send_message(message.from_user.id, text="–ü–æ–±—É—Ç–æ–≤–∞ —Ç–µ—Ö–Ω—ñ–∫–∞", reply_markup=nav.houseMenu)
    elif message.text == "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏":
          await bot.send_message(message.from_user.id, text="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏", reply_markup=nav.cold1)
    elif message.text == "–†–æ–±–æ—Ç–∏ –ø–∏–ª–æ—Å–æ—Å–∏":
          await bot.send_message(message.from_user.id, text="–†–æ–±–æ—Ç–∏ –ø–∏–ª–æ—Å–æ—Å–∏", reply_markup=nav.clear1)
    elif message.text == "–ü—Ä–∞–ª—å–Ω—ñ –º–∞—à–∏–Ω–∏":
          await bot.send_message(message.from_user.id, text="–ü—Ä–∞–ª—å–Ω—ñ –º–∞—à–∏–Ω–∏", reply_markup=nav.car6)
    elif message.text == "–†—é–∫–∑–∞–∫–∏":
          await bot.send_message(message.from_user.id, text="–†—é–∫–∑–∞–∫–∏", reply_markup=nav.back2)
    elif message.text == "–®–∫—ñ–ª—å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è":
          await bot.send_message(message.from_user.id, text="–®–∫—ñ–ª—å–Ω–µ –ø—Ä–∏–ª–∞–¥–¥—è", reply_markup=nav.school_ba)
    elif message.text == "–ü–∞–ø–µ—Ä–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è":
          await bot.send_message(message.from_user.id, text="–ü–∞–ø–µ—Ä–æ–≤–∞ –ø—Ä–æ–¥—É–∫—Ü—ñ—è", reply_markup=nav.paper1)


          furniture_shop = InlineKeyboardMarkup()
          for fur in furniture_shop:
              button = InlineKeyboardButton(text = furniture, callback_data=furniture)
              furniture_shop.add(button)


        





         


          

         
@dp.callback_query_handler()
async def furniture_info_handler(callback_query: types.CallbackQuery):
     if callback_query.data in furniture.keys():
          await bot.send_photo(callback_query.message.chat.id, furniture[callback_query.data]["photo"])
          furniture_name = furniture[callback_query.data]["name"]
          url = furniture[callback_query.data]["site_url"]
          furniture_description = furniture[callback_query.data]["description"]
          furniture_price = furniture[callback_query.data]["price"]
          message = f"<b>–ù–∞–∑–≤–∞: </b> {furniture_name}\n<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞–≥–∞–∑–∏–Ω: </b> {url}\n\n<b>–û–ø–∏—Å: </b> {furniture_description}\n\n<b>–¶—ñ–Ω–∞:</b> {furniture_price}"
          await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')
     else:
          await bot.send_message(callback_query.message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–∞–∂–∞–ª—å –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñüòü")











async def on_startup(dp):
     await set_default_commands(dp)

  
  
if __name__ == '__main__':
     executor.start_polling(dp, on_startup=on_startup)
    