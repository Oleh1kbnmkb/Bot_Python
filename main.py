import logging
from aiogram import Bot, Dispatcher, executor, types

from site_url import computer
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from hendlers import dp

# from aiogram.types import Message, CallbackQuery
# from aiogram.dispatcher.filters import Command
# from config import PAYMENT_TOKEN
# from main import Dispatcher
# from shop import keyboard, cd

# import sqlite3




TOKEN = "6255018670:AAHDRCHL72HP0STq6oHn2WmWv6YcNtQtwoc"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, text ='–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ –≤–∞—Å —É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ñ Rozetka!\n–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –ø—Ä–∏–¥–±–∞—Ç–∏ —Ç–æ–≤–∞—Ä —à–≤–∏–¥–∫–æ —ñ –±–µ–∑–ø–µ—á–Ω–æ.', reply_markup=BotMenu)






btnMenu = KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

# --- Bot Menu ---
shop_choice = ReplyKeyboardMarkup()
btn1 = KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")
btn2 = KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞")
btn3 = KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
BotMenu = ReplyKeyboardMarkup(resize_keyboard=True)
BotMenu.add(btn1, btn2)
BotMenu.add(btn3)



# --- Bot Other Menu ---
shop_goods = ReplyKeyboardMarkup()
technique = KeyboardButton("–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞")
technique1 = KeyboardButton("–î–∏–≤–∞–Ω–∏")
home_appliances = KeyboardButton("–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏")
home_goods = KeyboardButton("–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏")
instruments = KeyboardButton("–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥")



OtherMenu = ReplyKeyboardMarkup(resize_keyboard=True)
OtherMenu.add(technique, technique1)
OtherMenu.add(home_appliances, home_goods) 
OtherMenu.add(instruments, btnMenu)







# --- Laptop Menu ---
goods = InlineKeyboardMarkup(
    inline_keyboard=[
    [InlineKeyboardButton(text = "–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –ì—ñ–ª–º–æ—Ä", callback_data="–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –ì—ñ–ª–º–æ—Ä")],
    [InlineKeyboardButton(text = "–ù–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –°—ñ—Ç—ñ", callback_data="–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –°—ñ—Ç—ñ")],
    [InlineKeyboardButton(text = "–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –ê—Ä—Å—ñ", callback_data="–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –ê—Ä—Å—ñ")],
    [InlineKeyboardButton(text = "–ö—Ä—ñ—Å–ª–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–µ –ê–ö–õ–ê–° –õ–∞—Ä–∫", callback_data="–ö—Ä—ñ—Å–ª–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π–Ω–µ –ê–ö–õ–ê–° –õ–∞—Ä–∫")],
    [InlineKeyboardButton(text = "–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –¢–µ—Ç–∞", callback_data="–ö—Ä—ñ—Å–ª–æ –ê–ö–õ–ê–° –¢–µ—Ç–∞")]
    ]
)


sofas = InlineKeyboardMarkup(
    inline_keyboard=[
    [InlineKeyboardButton(text = "–î–∏–≤–∞–Ω Embawood –õ—É–Ω–∞", callback_data="–î–∏–≤–∞–Ω Embawood –õ—É–Ω–∞")],
    [InlineKeyboardButton(text = "–î–∏–≤–∞–Ω DLS –ö–æ–ª—ñ–±—Ä—ñ-3-–ö–°", callback_data="–î–∏–≤–∞–Ω DLS –ö–æ–ª—ñ–±—Ä—ñ-3-–ö–°")],
    [InlineKeyboardButton(text = "–î–∏–≤–∞–Ω –º–æ–¥—É–ª—å–Ω–∏–π RICHMAN ", callback_data="–î–∏–≤–∞–Ω –º–æ–¥—É–ª—å–Ω–∏–π RICHMAN ")],
    [InlineKeyboardButton(text = "–î–∏–≤–∞–Ω –º–æ–¥—É–ª—å–Ω–∏–π", callback_data="–î–∏–≤–∞–Ω –º–æ–¥—É–ª—å–Ω–∏–π")],
    [InlineKeyboardButton(text = "–î–∏–≤–∞–Ω DANIRO –õ—ñ—Ä–∏–∫", callback_data="–î–∏–≤–∞–Ω DANIRO –õ—ñ—Ä–∏–∫")]
    ]
)



table_school = InlineKeyboardMarkup(
    inline_keyboard=[
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –î–∂–µ—Ç", callback_data="–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –î–∂–µ—Ç")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –ê—Ç—Ä–∏–±—É—Ç", callback_data="–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –ê—Ç—Ä–∏–±—É—Ç")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –°–µ–Ω—Å", callback_data="–°—Ç—ñ–ª M-Concept –°–µ—Ä—ñ—è –°–µ–Ω—Å")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –°–ö-3 Kredens furniture", callback_data="–°—Ç—ñ–ª –∫–æ–º–ø'—é—Ç–µ—Ä–Ω–∏–π –°–ö-3 Kredens furniture")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª –ë—è–Ω–∫–æ (–≥—Ä–∞—Ñ—ñ—Ç)", callback_data="–°—Ç—ñ–ª –ë—è–Ω–∫–æ (–≥—Ä–∞—Ñ—ñ—Ç)")]
    ]
)



magazine_tables = InlineKeyboardMarkup(
    inline_keyboard=[
    [InlineKeyboardButton(text = "–°—Ç–æ–ª–∏–∫ –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π Wudus Plump", callback_data="–°—Ç–æ–ª–∏–∫ –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π Wudus Plump")],
    [InlineKeyboardButton(text = "–°—Ç–æ–ª–∏–∫ –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ß–§–õ–ò –ú–∞—Ä—Å", callback_data="–°—Ç–æ–ª–∏–∫ –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ß–§–õ–ò –ú–∞—Ä—Å")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π M-Concept", callback_data="–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π M-Concept")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ê–Ω—Ç–æ–Ω—ñ–∫", callback_data="–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ê–Ω—Ç–æ–Ω—ñ–∫")],
    [InlineKeyboardButton(text = "–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ê–Ω—Ç–æ–Ω—ñ–∫ –î–°-2", callback_data="–°—Ç—ñ–ª –∂—É—Ä–Ω–∞–ª—å–Ω–∏–π –ê–Ω—Ç–æ–Ω—ñ–∫ –î–°-2")]
    ]
)


book_shelves = InlineKeyboardMarkup(
    inline_keyboard=[
    [InlineKeyboardButton(text = "–ü–æ–ª–∫–∞ –ü-27-53", callback_data="–ü–æ–ª–∫–∞ –ü-27-53")],
    [InlineKeyboardButton(text = "–ö–Ω–∏–∂–∫–æ–≤–∞ –ø–æ–ª–∏—Ü—è –ü–ö-2", callback_data="–ö–Ω–∏–∂–∫–æ–≤–∞ –ø–æ–ª–∏—Ü—è –ü–ö-2")],
    [InlineKeyboardButton(text = "–ü–æ–ª–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è DC –î–°-4", callback_data="–ü–æ–ª–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è DC –î–°-4")],
    [InlineKeyboardButton(text = "–ü–æ–ª–∏—Ü—è –Ω–∞–≤—ñ—Å–Ω–∞ –Ω–∞ —Å—Ç—ñ–Ω—É –ü-1", callback_data="–ü–æ–ª–∏—Ü—è –Ω–∞–≤—ñ—Å–Ω–∞ –Ω–∞ —Å—Ç—ñ–Ω—É –ü-1")],
    [InlineKeyboardButton(text = "–ü–æ–ª–∫–∞ Forte Erika –¥–ª—è –∫–Ω–∏–≥", callback_data="–ü–æ–ª–∫–∞ Forte Erika –¥–ª—è –∫–Ω–∏–≥")]
    ]
)





     

     
async def set_default_commands(dp):
     await bot.set_my_commands(
          [
          types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
          types.BotCommand('buy', '–ö—É–ø–∏—Ç–∏ —Ç–æ–≤–∞—Ä –∑ –º–∞–≥–∞–∑–∏–Ω—É')
          ]
     )





@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == "–ú–∞–≥–∞–∑–∏–Ω":
        await bot.send_message(message.from_user.id, text = "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏", reply_markup=OtherMenu)
    elif message.text == "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞":
          await bot.send_message(message.from_user.id, text = "–û—Ñ—ñ—Å–Ω—ñ –∫—Ä—ñ—Å–ª–∞", reply_markup=goods)
    elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
          await bot.send_message(message.from_user.id, text = "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=BotMenu)
    elif message.text == "–î–∏–≤–∞–Ω–∏":
          await bot.send_message(message.from_user.id, text = "–î–∏–≤–∞–Ω–∏", reply_markup=sofas)
    elif message.text == "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏":
          await bot.send_message(message.from_user.id, text = "–†–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏", reply_markup=table_school)
    elif message.text == "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏":
          await bot.send_message(message.from_user.id, text = "–ñ—É—Ä–Ω–∞–ª—å–Ω—ñ —Å—Ç–æ–ª–∏", reply_markup=magazine_tables)
    elif message.text == "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥":
          await bot.send_message(message.from_user.id, text = "–ü–æ–ª–∏—Ü—ñ –¥–ª—è –∫–Ω–∏–≥", reply_markup=book_shelves)
    
          computer_shop = InlineKeyboardMarkup()
          for teh in computer_shop:
            button = InlineKeyboardButton(text = computer, callback_data=computer)
            computer_shop.add(button)
          

         
@dp.callback_query_handler()
async def computer_info_handler(callback_query: types.CallbackQuery):
     if callback_query.data in computer.keys():
          await bot.send_photo(callback_query.message.chat.id, computer[callback_query.data]["photo"])
          computer_price = computer[callback_query.data]["price"]
          message = f"<b>Price: </b> {computer_price}"
          keyboard3 = types.InlineKeyboardMarkup()
          button = types.InlineKeyboardButton(text = '–î–æ–±–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É', callback_data='–î–æ–±–∞–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä —É –∫–æ—Ä–∑–∏–Ω—É')
          await bot.send_message(callback_query.message.chat.id, message, parse_mode='html')
     else:
          await bot.send_message(callback_query.message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–∞–∂–∞–ª—å –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñüòü")



# @dp.message_handler(commands=['buy'])
# async def buy(message: Message):
#      connect = sqlite3.connect('shop.db')
#      cursor = connect.cursor()
#      cursor.execute("""INSERT INTO users (user_id, name) VALUES (?, ?)""", [message.chat.id, message.chat.first_name])
#      cursor.close()
#      connect.commit()
#      connect.close()
#      await message.answer('–ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π')

# @dp.message_handler(commands=['cart'])
# async def cart(message: Message):
#      await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏', reply_markup=keyboard)


# @dp.callback_query_handler(cd.filter(id = '1'))
# async def smart(call: CallbackQuery, callback_data: dict):
#      await call.answer(callback_time = 10)

#      product_id = callback_data.get('id')
#      user_id = call.message.chat.id

#      connect = sqlite3.connect('shop.db')
#      cursor = connect.cursor()
#      cursor.execute("""INSERT INTO users (user_id, name) VALUES (?, ?)""", [user_id, product_id])
#      cursor.close()
#      connect.commit()
#      connect.close()

#      await call.message.answer('–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É')










async def on_startup(dp):
     await set_default_commands(dp)

  
  
if __name__ == '__main__':
     executor.start_polling(dp, skip_updates=True)